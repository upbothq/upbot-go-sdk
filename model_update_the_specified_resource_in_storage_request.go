/*
upbot API Documentation

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upbot

import (
	"encoding/json"
)

// checks if the UpdateTheSpecifiedResourceInStorageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTheSpecifiedResourceInStorageRequest{}

// UpdateTheSpecifiedResourceInStorageRequest struct for UpdateTheSpecifiedResourceInStorageRequest
type UpdateTheSpecifiedResourceInStorageRequest struct {
	// Must not be greater than 255 characters.
	Name *string `json:"name,omitempty"`
	// Must not be greater than 500 characters.
	Target NullableString `json:"target,omitempty"`
	// 
	Interval *string `json:"interval,omitempty"`
	// Must be at least 0. Must not be greater than 10.
	RetryCount NullableInt32 `json:"retry_count,omitempty"`
	// 
	IsActive *bool `json:"is_active,omitempty"`
	// 
	Type *string `json:"type,omitempty"`
	// 
	Bot []string `json:"bot,omitempty"`
}

// NewUpdateTheSpecifiedResourceInStorageRequest instantiates a new UpdateTheSpecifiedResourceInStorageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTheSpecifiedResourceInStorageRequest() *UpdateTheSpecifiedResourceInStorageRequest {
	this := UpdateTheSpecifiedResourceInStorageRequest{}
	return &this
}

// NewUpdateTheSpecifiedResourceInStorageRequestWithDefaults instantiates a new UpdateTheSpecifiedResourceInStorageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTheSpecifiedResourceInStorageRequestWithDefaults() *UpdateTheSpecifiedResourceInStorageRequest {
	this := UpdateTheSpecifiedResourceInStorageRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateTheSpecifiedResourceInStorageRequest) SetName(v string) {
	o.Name = &v
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetTarget() string {
	if o == nil || IsNil(o.Target.Get()) {
		var ret string
		return ret
	}
	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// HasTarget returns a boolean if a field has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) HasTarget() bool {
	if o != nil && o.Target.IsSet() {
		return true
	}

	return false
}

// SetTarget gets a reference to the given NullableString and assigns it to the Target field.
func (o *UpdateTheSpecifiedResourceInStorageRequest) SetTarget(v string) {
	o.Target.Set(&v)
}
// SetTargetNil sets the value for Target to be an explicit nil
func (o *UpdateTheSpecifiedResourceInStorageRequest) SetTargetNil() {
	o.Target.Set(nil)
}

// UnsetTarget ensures that no value is present for Target, not even an explicit nil
func (o *UpdateTheSpecifiedResourceInStorageRequest) UnsetTarget() {
	o.Target.Unset()
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *UpdateTheSpecifiedResourceInStorageRequest) SetInterval(v string) {
	o.Interval = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetRetryCount() int32 {
	if o == nil || IsNil(o.RetryCount.Get()) {
		var ret int32
		return ret
	}
	return *o.RetryCount.Get()
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetRetryCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetryCount.Get(), o.RetryCount.IsSet()
}

// HasRetryCount returns a boolean if a field has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) HasRetryCount() bool {
	if o != nil && o.RetryCount.IsSet() {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given NullableInt32 and assigns it to the RetryCount field.
func (o *UpdateTheSpecifiedResourceInStorageRequest) SetRetryCount(v int32) {
	o.RetryCount.Set(&v)
}
// SetRetryCountNil sets the value for RetryCount to be an explicit nil
func (o *UpdateTheSpecifiedResourceInStorageRequest) SetRetryCountNil() {
	o.RetryCount.Set(nil)
}

// UnsetRetryCount ensures that no value is present for RetryCount, not even an explicit nil
func (o *UpdateTheSpecifiedResourceInStorageRequest) UnsetRetryCount() {
	o.RetryCount.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *UpdateTheSpecifiedResourceInStorageRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateTheSpecifiedResourceInStorageRequest) SetType(v string) {
	o.Type = &v
}

// GetBot returns the Bot field value if set, zero value otherwise.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetBot() []string {
	if o == nil || IsNil(o.Bot) {
		var ret []string
		return ret
	}
	return o.Bot
}

// GetBotOk returns a tuple with the Bot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) GetBotOk() ([]string, bool) {
	if o == nil || IsNil(o.Bot) {
		return nil, false
	}
	return o.Bot, true
}

// HasBot returns a boolean if a field has been set.
func (o *UpdateTheSpecifiedResourceInStorageRequest) HasBot() bool {
	if o != nil && !IsNil(o.Bot) {
		return true
	}

	return false
}

// SetBot gets a reference to the given []string and assigns it to the Bot field.
func (o *UpdateTheSpecifiedResourceInStorageRequest) SetBot(v []string) {
	o.Bot = v
}

func (o UpdateTheSpecifiedResourceInStorageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTheSpecifiedResourceInStorageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Target.IsSet() {
		toSerialize["target"] = o.Target.Get()
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if o.RetryCount.IsSet() {
		toSerialize["retry_count"] = o.RetryCount.Get()
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Bot) {
		toSerialize["bot"] = o.Bot
	}
	return toSerialize, nil
}

type NullableUpdateTheSpecifiedResourceInStorageRequest struct {
	value *UpdateTheSpecifiedResourceInStorageRequest
	isSet bool
}

func (v NullableUpdateTheSpecifiedResourceInStorageRequest) Get() *UpdateTheSpecifiedResourceInStorageRequest {
	return v.value
}

func (v *NullableUpdateTheSpecifiedResourceInStorageRequest) Set(val *UpdateTheSpecifiedResourceInStorageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTheSpecifiedResourceInStorageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTheSpecifiedResourceInStorageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTheSpecifiedResourceInStorageRequest(val *UpdateTheSpecifiedResourceInStorageRequest) *NullableUpdateTheSpecifiedResourceInStorageRequest {
	return &NullableUpdateTheSpecifiedResourceInStorageRequest{value: val, isSet: true}
}

func (v NullableUpdateTheSpecifiedResourceInStorageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTheSpecifiedResourceInStorageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


